{"version":3,"file":"app/api/chat/goal-tracker/route.js","mappings":"oFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,0CCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,iXCGO,IAAMC,EAAU,OAEhB,eAAeC,EAAKC,CAAY,EACrC,GAAM,CAAEC,SAAAA,CAAQ,CAAEC,SAAAA,CAAQ,CAAE,CAAG,MAAMF,EAAIG,IAAI,GAEvCC,EAAe,CAAC;;;;;;;;;;mBAUL,EAAEF,EAAWG,KAAKC,SAAS,CAACJ,GAAY,6BAA6B;;;;;;;;+CAQzC,CAAC,CAU9C,MAAOK,CARQ,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAW,CAC9BC,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAO,eACdC,OAAQP,EACRH,SAAAA,EACAW,UAAW,IACXC,YAAa,GACf,IAEcC,kBAAkB,EAClC,CC9BA,IAAAC,EAAA,IAAwBC,EAAAC,mBAAmB,EAC3CC,WAAA,CACAC,KAAcC,EAAAC,CAAS,CAAAC,SAAA,CACvBC,KAAA,+BACAC,SAAA,yBACAC,SAAA,QACAC,WAAA,iCACA,EACAC,iBAAA,6GACAC,iBAVA,GAWAC,SAAYC,CACZ,GAIA,CAAQC,oBAAAA,CAAA,CAAAC,6BAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAiElB,EACzEmB,EAAA,+BACA,SAAAC,IACA,MAAW,GAAAC,EAAAC,EAAA,EAAW,CACtBJ,YAAAA,EACAD,6BAAAA,CACA,EACA,CC1BO,IAAAM,EAAqBC,EAC5BC,EAAeC,EAAAC,CAAsB,CAAAC,IAAA,CAAM5B","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/chat/goal-tracker/route.ts","webpack://_N_E/./app/api/chat/goal-tracker/route.ts?73fa","webpack://_N_E/"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { openai } from '@ai-sdk/openai'\nimport { streamText } from 'ai'\n\nexport const runtime = 'edge'\n\nexport async function POST(req: Request) {\n  const { messages, userData } = await req.json()\n\n  const systemPrompt = `You are the Goal Achievement Tracking Agent for the Chainweb ZK Reputation System. Your job is to help users set, track, and achieve reputation milestones across Kadena's multi-chain ecosystem.\n\nYour responsibilities:\n- Understand user-defined goals for DeFi (Chain 20), Gaming (Chain 21), and Development (Chain 22)\n- Track progress against numerical targets and timelines\n- Recommend next actions to close goal gaps\n- Alert users of risks to goal completion (time, resources, networking requirements)\n- Suggest checkpoints, metrics, and reminders tailored to each domain\n- Translate reputation points into real-world eligibility (e.g., exclusive access thresholds)\n\nUser Goal Context: ${userData ? JSON.stringify(userData) : 'No user goal data provided'}\n\nAlways respond with:\n1. Goal Status Summary (per chain goal)\n2. Key blockers or accelerators\n3. Concrete action plan with milestones and checkpoints\n4. Optional motivational insights or reminders\n\nTone: supportive, forward-looking, data-driven.`\n\n  const result = await streamText({\n    model: openai('gpt-4o-mini') as any,\n    system: systemPrompt,\n    messages,\n    maxTokens: 1000,\n    temperature: 0.65,\n  })\n\n  return result.toAIStreamResponse()\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/ayush/Documents/hackathons/croissant-eth/kadena_croissant/agents/app/api/chat/goal-tracker/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/chat/goal-tracker/route\",\n        pathname: \"/api/chat/goal-tracker\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/goal-tracker/route\"\n    },\n    resolvedPagePath: \"/Users/ayush/Documents/hackathons/croissant-eth/kadena_croissant/agents/app/api/chat/goal-tracker/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/goal-tracker/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fchat%2Fgoal-tracker%2Froute&page=%2Fapi%2Fchat%2Fgoal-tracker%2Froute&pagePath=private-next-app-dir%2Fapi%2Fchat%2Fgoal-tracker%2Froute.ts&appDir=%2FUsers%2Fayush%2FDocuments%2Fhackathons%2Fcroissant-eth%2Fkadena_croissant%2Fagents%2Fapp&appPaths=%2Fapi%2Fchat%2Fgoal-tracker%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/chat/goal-tracker/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["module","exports","require","runtime","POST","req","messages","userData","json","systemPrompt","JSON","stringify","result","streamText","model","openai","system","maxTokens","temperature","toAIStreamResponse","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fchat_2Fgoal_tracker_2Froute_ts_page_2Fapi_2Fchat_2Fgoal_tracker_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRmdvYWwtdHJhY2tlciUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGY2hhdCUyRmdvYWwtdHJhY2tlciUyRnJvdXRlJnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRmdvYWwtdHJhY2tlciUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmF5dXNoJTJGRG9jdW1lbnRzJTJGaGFja2F0aG9ucyUyRmNyb2lzc2FudC1ldGglMkZrYWRlbmFfY3JvaXNzYW50JTJGYWdlbnRzJTJGYXBwJmFwcFBhdGhzPSUyRmFwaSUyRmNoYXQlMkZnb2FsLXRyYWNrZXIlMkZyb3V0ZSZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCE_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap"],"sourceRoot":""}