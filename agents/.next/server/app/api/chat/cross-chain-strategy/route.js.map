{"version":3,"file":"app/api/chat/cross-chain-strategy/route.js","mappings":"oFAAAA,CAAAA,EAAAC,OAAA,CAAAC,QAAA,0CCAAF,CAAAA,EAAAC,OAAA,CAAAC,QAAA,gXCGO,IAAMC,EAAU,OAEhB,eAAeC,EAAKC,CAAY,EACrC,GAAM,CAAEC,SAAAA,CAAQ,CAAEC,SAAAA,CAAQ,CAAE,CAAG,MAAMF,EAAIG,IAAI,GAEvCC,EAAe,CAAC;;;;;;;;;mBASL,EAAEF,EAAWG,KAAKC,SAAS,CAACJ,GAAY,wBAAwB;;;;;;;;;;;;;;;;2LAgBwG,CAAC,CAU1L,MAAOK,CARQ,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,EAAW,CAC9BC,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,EAAO,eACdC,OAAQP,EACRH,SAAAA,EACAW,UAAW,IACXC,YAAa,EACf,IAEcC,kBAAkB,EAClC,CCrCA,IAAAC,EAAA,IAAwBC,EAAAC,mBAAmB,EAC3CC,WAAA,CACAC,KAAcC,EAAAC,CAAS,CAAAC,SAAA,CACvBC,KAAA,uCACAC,SAAA,iCACAC,SAAA,QACAC,WAAA,yCACA,EACAC,iBAAA,qHACAC,iBAVA,GAWAC,SAAYC,CACZ,GAIA,CAAQC,oBAAAA,CAAA,CAAAC,6BAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAiElB,EACzEmB,EAAA,uCACA,SAAAC,IACA,MAAW,GAAAC,EAAAC,EAAA,EAAW,CACtBJ,YAAAA,EACAD,6BAAAA,CACA,EACA,CC1BO,IAAAM,EAAqBC,EAC5BC,EAAeC,EAAAC,CAAsB,CAAAC,IAAA,CAAM5B","sources":["webpack://_N_E/external commonjs \"node:async_hooks\"","webpack://_N_E/external commonjs \"node:buffer\"","webpack://_N_E/./app/api/chat/cross-chain-strategy/route.ts","webpack://_N_E/./app/api/chat/cross-chain-strategy/route.ts?33ae","webpack://_N_E/?2db6"],"sourcesContent":["module.exports = require(\"node:async_hooks\");","module.exports = require(\"node:buffer\");","import { openai } from '@ai-sdk/openai'\nimport { streamText } from 'ai'\n\nexport const runtime = 'edge'\n\nexport async function POST(req: Request) {\n  const { messages, userData } = await req.json()\n\n  const systemPrompt = `You are the Cross-Chain Strategy Agent for the Chainweb ZK Reputation System. You specialize in providing strategic recommendations for maximizing reputation across DeFi, Gaming, and Development domains on Kadena's multi-chain ecosystem.\n\nYour expertise includes:\n- Multi-chain portfolio optimization strategies\n- Risk-reward analysis across different domains\n- Timing recommendations for activity distribution\n- Cross-domain synergy identification\n- Reputation growth pathway planning\n\nUser Data Context: ${userData ? JSON.stringify(userData) : 'No user data provided'}\n\nChain Specializations:\n- Chain 20 (DeFi): Trading, liquidity provision, lending protocols, yield farming\n- Chain 21 (Gaming): NFT trading, game achievements, virtual asset management\n- Chain 22 (Development): Smart contract deployment, code quality metrics, protocol contributions\n\nScoring Weights: DeFi (40%), Gaming (30%), Development (30%)\n\nYour role is to:\n1. Analyze current reputation distribution across chains\n2. Identify underutilized opportunities\n3. Suggest optimal activity sequences\n4. Recommend time-based strategies\n5. Explain potential risks and mitigation strategies\n\nAlways provide concrete, actionable strategies with clear reasoning. Consider gas costs, time investment, and potential returns. Use a strategic, advisory tone while remaining accessible.`\n\n  const result = await streamText({\n    model: openai('gpt-4o-mini') as any,\n    system: systemPrompt,\n    messages,\n    maxTokens: 1000,\n    temperature: 0.8,\n  })\n\n  return result.toAIStreamResponse()\n}\n","import { AppRouteRouteModule } from \"next/dist/server/future/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/server/future/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/server/lib/patch-fetch\";\nimport * as userland from \"/Users/ayush/Documents/hackathons/croissant-eth/kadena_croissant/agents/app/api/chat/cross-chain-strategy/route.ts\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/chat/cross-chain-strategy/route\",\n        pathname: \"/api/chat/cross-chain-strategy\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/cross-chain-strategy/route\"\n    },\n    resolvedPagePath: \"/Users/ayush/Documents/hackathons/croissant-eth/kadena_croissant/agents/app/api/chat/cross-chain-strategy/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/chat/cross-chain-strategy/route\";\nfunction patchFetch() {\n    return _patchFetch({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\nexport { routeModule, requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, originalPathname, patchFetch,  };\n\n//# sourceMappingURL=app-route.js.map","import { EdgeRouteModuleWrapper } from \"next/dist/server/web/edge-route-module-wrapper\";\n// Import the userland code.\nimport * as module from \"next-app-loader?name=app%2Fapi%2Fchat%2Fcross-chain-strategy%2Froute&page=%2Fapi%2Fchat%2Fcross-chain-strategy%2Froute&pagePath=private-next-app-dir%2Fapi%2Fchat%2Fcross-chain-strategy%2Froute.ts&appDir=%2FUsers%2Fayush%2FDocuments%2Fhackathons%2Fcroissant-eth%2Fkadena_croissant%2Fagents%2Fapp&appPaths=%2Fapi%2Fchat%2Fcross-chain-strategy%2Froute&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!private-next-app-dir/api/chat/cross-chain-strategy/route.ts?__next_edge_ssr_entry__\";\nexport const ComponentMod = module;\nexport default EdgeRouteModuleWrapper.wrap(module.routeModule);\n\n//# sourceMappingURL=edge-app-route.js.map"],"names":["module","exports","require","runtime","POST","req","messages","userData","json","systemPrompt","JSON","stringify","result","streamText","model","openai","system","maxTokens","temperature","toAIStreamResponse","routeModule","module_compiled","AppRouteRouteModule","definition","kind","route_kind","x","APP_ROUTE","page","pathname","filename","bundlePath","resolvedPagePath","nextConfigOutput","userland","route_namespaceObject","requestAsyncStorage","staticGenerationAsyncStorage","serverHooks","originalPathname","patchFetch","patch_fetch","XH","ComponentMod","route_next_edge_ssr_entry_namespaceObject","next_edge_app_route_loaderabsolutePagePath_private_next_app_dir_2Fapi_2Fchat_2Fcross_chain_strategy_2Froute_ts_page_2Fapi_2Fchat_2Fcross_chain_strategy_2Froute_appDirLoader_bmV4dC1hcHAtbG9hZGVyP25hbWU9YXBwJTJGYXBpJTJGY2hhdCUyRmNyb3NzLWNoYWluLXN0cmF0ZWd5JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGY3Jvc3MtY2hhaW4tc3RyYXRlZ3klMkZyb3V0ZSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNoYXQlMkZjcm9zcy1jaGFpbi1zdHJhdGVneSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmF5dXNoJTJGRG9jdW1lbnRzJTJGaGFja2F0aG9ucyUyRmNyb2lzc2FudC1ldGglMkZrYWRlbmFfY3JvaXNzYW50JTJGYWdlbnRzJTJGYXBwJmFwcFBhdGhzPSUyRmFwaSUyRmNoYXQlMkZjcm9zcy1jaGFpbi1zdHJhdGVneSUyRnJvdXRlJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEIQ_3D_3D_nextConfigOutput_preferredRegion_middlewareConfig_e30_3D_","edge_route_module_wrapper","a","wrap"],"sourceRoot":""}